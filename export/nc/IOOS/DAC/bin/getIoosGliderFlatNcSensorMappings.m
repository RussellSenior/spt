function sensorMap = getIoosGliderFlatNcSensorMappings(varargin)
%
% sensorMap = getFlatNcSensorMappings(varargin)
%
% Returns a sturctured array mapping NetCDF variable names from the 
% IOOS_Glider_NetCDF_Flat_v1.0.nc specification to a cell array of valid Dbd or 
% DbdGroup native glider sensors.  The default lists of valid glider sensor 
% names can be modified if additional sensors should be considered.
%
% The return value is used by mapIoosGliderFlatNcSensors to create a data
% structure that is used to write individual NetCDF files conforming to the
% specification using writeIoosGliderFlatNc.m.
%
% See also writeIoosGliderFlatNc mapIoosGliderFlatNcSensors DbdGroup Dbd
% ============================================================================
% $RCSfile: getIoosGliderFlatNcSensorMappings.m,v $
% $Source: /home/kerfoot/cvsroot/slocum/matlab/spt/export/nc/IOOS/DAC/bin/getIoosGliderFlatNcSensorMappings.m,v $
% $Revision: 1.3 $
% $Date: 2014/06/09 14:21:18 $
% $Author: kerfoot $
% ============================================================================
%

app = mfilename;
sensorMap = [];

if ~isequal(mod(length(varargin),2),0)
    error(sprintf('%s:nargin', app),...
        'Invalid (odd) number of options specified');
end

% Process Options
for x = 1:2:length(varargin)
    
    name = varargin{x};
    value = varargin{x+1};
    
    switch lower(name)
        
        otherwise
            error(sprintf('%s:invalidOption', app),...
                'Invalid option specified: %s',...
                name);
    end
end

% NC_VARS = {'time',...
%     'lat',...
%     'lon',...
%     'pressure',...
%     'depth',...
%     'temperature',...
%     'conductivity',...
%     'salinity',...
%     'density',...
%     'u',...
%     'v',...
%     'time_uv',...
%     'lat_uv',...
%     'lon_uv',...
%     'profile_id',...
%     'profile_time',...
%     'profile_lat',...
%     'profile_lon',...
%     'trajectory',...
%     }';

% Add default sensor mappings
sensorMap.time = {'timestamp',...
    'drv_sci_m_present_time_datenum',...
    'drv_m_present_time_datenum',...
    }';

sensorMap.lat = {'drv_latitude',...
    'drv_m_gps_lat',...
    }';

sensorMap.lon = {'drv_longitude',...
    'drv_m_gps_lon',...
    }';

sensorMap.pressure = {'drv_sci_water_pressure',...
    'drv_m_water_pressure',...
    'drv_m_pressure',...
    }';

sensorMap.depth = {'depth',...
    'drv_depth',...
    }';

sensorMap.temperature = {'drv_sea_water_temperature',...
    'sci_water_temp',...
    'm_water_temp',...
    }';

sensorMap.conductivity = {'drv_sea_water_electrical_conductivity',...
    'drv_sci_water_cond',...
    'drv_m_water_cond',...
    }';

sensorMap.salinity = {'drv_sea_water_salinity',...
    }';

sensorMap.density = {'drv_sea_water_density',...
    }';

sensorMap.u = {'drv_u',...
    'm_water_vx',...
    'm_final_water_vx',...
    }';

sensorMap.v = {'drv_v',...
    'm_water_vy',...
    'm_final_water_vy',...
    }';

sensorMap.time_uv = {}';

sensorMap.lat_uv = {}';

sensorMap.lon_uv = {}';

sensorMap.profile_id = {}';

sensorMap.profile_time = {}';

sensorMap.profile_lat = {}';

sensorMap.profile_lon = {}';

sensorMap.trajectory = {}';

    